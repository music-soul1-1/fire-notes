import firebase from "firebase/compat/app";
import { getAuth, GoogleAuthProvider, signInWithPopup, signOut } from 'firebase/auth';
import { 
  getFirestore, collection, doc, Timestamp,
  getDoc, setDoc, getDocs, updateDoc, 
  onSnapshot, query, deleteDoc, arrayUnion, orderBy
} from "firebase/firestore";
import { Note, Todo } from "./types";


const firebaseConfig = {
  apiKey: String(process.env.NEXT_PUBLIC_API_KEY),
  authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN + "",
  projectId: process.env.NEXT_PUBLIC_PROJECT_ID + "",
  storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET + "",
  messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID + "",
  appId: process.env.NEXT_PUBLIC_APP_ID + "",
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
//const analytics = getAnalytics(app);
const auth = getAuth(app);

// Initialize Cloud Firestore and get a reference to the service
const db = getFirestore(app);

const provider = new GoogleAuthProvider();

let uid : string | null;

/**
 * Updates uid value for API handler.
 */
export function loadUid() {
  uid = localStorage.getItem("uid");
  if (uid) {
    console.log("loaded uid");
    return true;
  }
  else {
    console.log("UID wasn't found in local storage.");
    return false;
  }
};

export async function signInWithGoogle() {
  signInWithPopup(auth, provider).then(async (result) => { // TODO: change this to redirect
    const displayName = result?.user.displayName;
    const email = result?.user.email;
    const profilePic = result?.user.photoURL;
    const domain = window.location.hostname;

    uid = result.user.uid;

    const userDocRef = doc(db, "users", uid);
    const userDocument = await getDoc(userDocRef);

    if (uid && !userDocument.exists()) {
      await setDoc(userDocRef, {
        uid: uid,
        displayName: displayName,
        email: email,
        lastLogin: new Date(),
        userPicUrl: profilePic,
        domain: domain,
      });
    }

    await updateDoc(userDocRef, {lastLogin: new Date(), domain: domain}); // updating last login date

    localStorage.setItem("uid", uid); // TODO: change this to cookie

    location.reload(); // Reloading page // TODO: Remove reloading
  }).catch((error) => {
    console.log(error);
  });

  return uid;
};

/**
 * Adds note for current user. Note id is auto-generated by Firestore
 * @param title Note title text
 * @param content Note content text
 */
export async function addNote(title : string, content : string) {
  if (uid) {
    await setDoc(doc(collection(db, "users", uid, "notes")), <Note>{
      title: title,
      content: content,
      tags: [''],
      createdAt: Timestamp.fromDate(new Date()),
      updatedAt: Timestamp.fromDate(new Date()),
      isPinned: false
    });
  }
};

/**
 * Returns all notes for current user.
 * @returns array of notes
 */
export async function getAllNotes() {
  if (!uid) {
    uid = localStorage.getItem("uid") ?? ' ';
  }
  
  const notesRef = collection(db, "users", uid, "notes");
  const notesQuery = query(notesRef, orderBy("updatedAt", "desc"));
  const querySnapshot = await getDocs(notesQuery);

  const notes = querySnapshot.docs.map((doc) => {
    const data = doc.data();

    const noteData: Note = {
      id: doc.id,
      title: data.title,
      content: data.content,
      tags: data.tags,
      createdAt: data.createdAt,
      updatedAt: data.updatedAt,
      isPinned: data.isAttached
    };
    return noteData;
  });

  return notes;
};

export async function getAllTodos() {
  if (!uid) {
    uid = localStorage.getItem("uid") ?? ' ';
  }

  const todosRef = collection(db, "users", uid, "todos");
  const todosQuery = query(todosRef, orderBy("updatedAt", "desc"));
  const querySnapshot = await getDocs(todosQuery);

  const todos = querySnapshot.docs.map((doc) => {
    const data = doc.data() as Todo;

    const todoData: Todo = {
      id: doc.id,
      title: data.title,
      subtask: data.subtask,
      tags: data.tags,
      createdAt: data.createdAt,
      updatedAt: data.updatedAt,
      isPinned: data.isPinned,
    };
    return todoData;
  });

  return todos;
};

export async function updateNoteContent(noteID: string, value: string) {
  if (uid) {
    const docRef = doc(db, "users", uid, "notes" , noteID);
    await updateDoc(docRef, {content: value, updatedAt: new Date()});
  }
};

export async function updateNoteTitle(noteID: string, value: string) {
  if (uid) {
    const docRef = doc(db, "users", uid, "notes" , noteID);
    await updateDoc(docRef, {title: value, updatedAt: new Date()});
  }
};

export async function addTag(id: string, tag: string, type: 'note' | 'todo') {
  if (uid) {
    let docRef;

    if (type === 'note') {
      docRef = doc(db, "users", uid, "notes" , id);
    }
    else {
      docRef = doc(db, "users", uid, "todos" , id);
    }
    
    const document = await getDoc(docRef);
    const docData = document.data();
  
    if (!docData?.tags || docData.tags.length === 0) {
      await setDoc(docRef, { tags: [tag] }, { merge: true });
    }
    else {
      await updateDoc(docRef, { tags: arrayUnion(tag) });
    }
  }
};

export async function updateTag(id: string, index: number, updatedTag: string, type: 'note' | 'todo') {
  if (uid) {
    let docRef, docData : Note | Todo;

    if (type === 'note') {
      docRef = doc(db, "users", uid, "notes" , id);
      const document = await getDoc(docRef);
      docData = document.data() as Note;

      if (docData) {
        const updatedTags = docData.tags.map((tag, i) => (i === index ? updatedTag : tag));
        await updateDoc(docRef, {tags: updatedTags, updatedAt: new Date()} );
      }
    }
    else {
      docRef = doc(db, "users", uid, "todos" , id);
      const document = await getDoc(docRef);
      docData = document.data() as Todo;

      if (docData) {
        const updatedTags = docData.tags.map((tag, i) => (i === index ? updatedTag : tag));
        await updateDoc(docRef, {tags: updatedTags} );
      }
    }
  }
};

export async function removeTag(id: string, index: number, type: 'note' | 'todo') {
  if (uid) {
    let docRef, docData : Note | Todo;

    if (type === 'note') {
      docRef = doc(db, "users", uid, "notes" , id);
      const document = await getDoc(docRef);
      docData = document.data() as Note;
    }
    else {
      docRef = doc(db, "users", uid, "todos" , id);
      const document = await getDoc(docRef);
      docData = document.data() as Todo;
    }

    if (docData) {
      const updatedTags = [...docData.tags];

      updatedTags.splice(index, 1);

      await updateDoc(docRef, {tags: updatedTags, updatedAt: new Date()} );
    }
  }
}

export async function addTodo(title: string, subtask: string) {
  if (!uid) {
    uid = localStorage.getItem("uid") ?? ' ';
  }

  await setDoc(doc(collection(db, "users", uid, "todos")), <Todo>{
    title: title,
    subtask: [{
      text: subtask,
      completed: false,
      completedAt: Timestamp.fromDate(new Date(1, 0, 1)),
      createdAt: Timestamp.fromDate(new Date()),
      updatedAt: Timestamp.fromDate(new Date()),
    }],
    tags: [''],
    createdAt: Timestamp.fromDate(new Date()),
    updatedAt: Timestamp.fromDate(new Date()),
    isPinned: false,
  });
};

export async function updateTodoSubtask(id: string, index: number, value: string) {
  if (uid) {
    const docRef = doc(db, "users", uid, "todos", id);
    const todoDoc = await getDoc(docRef);
    const todoData = todoDoc.data() as Todo;

    if (todoData) {
      todoData.subtask[index].text = value;
      todoData.subtask[index].updatedAt = Timestamp.fromDate(new Date());
      todoData.updatedAt = Timestamp.fromDate(new Date());

      await updateDoc(docRef, todoData);
    }
  }
};

export async function updateTodoTitle(id: string, value: string) {
  if (uid) {
    const docRef = doc(db, "users", uid, "todos" , id);

    await updateDoc(docRef, {title: value, updatedAt: Timestamp.fromDate(new Date())});
  }
};

export async function setCompleted(id: string, index: number, isCompleted: boolean) {
  if (uid) {
    const docRef = doc(db, "users", uid, "todos" , id);
    const todoDoc = await getDoc(docRef);
    const todoData = todoDoc.data() as Todo;
  
    if (todoData) {
      todoData.subtask[index].completed = isCompleted;
      todoData.subtask[index].completedAt = Timestamp.fromDate(new Date());
      todoData.subtask[index].updatedAt = Timestamp.fromDate(new Date());
  
      await updateDoc(docRef, todoData); 
    }
  }
};

export async function addSubtask(id: string, text?: string) {
  if (uid) {
    const docRef = doc(db, "users", uid, "todos", id);
    const document = await getDoc(docRef);
    const docData = document.data() as Todo;
    
    const newSubtasks = [...docData.subtask, {
      text: text ?? '',
      completed: false,
      completedAt: Timestamp.fromDate(new Date(1, 0, 1)),
      createdAt: Timestamp.fromDate(new Date()),
      updatedAt: Timestamp.fromDate(new Date()),
    }];
    docData.subtask = newSubtasks;

    await updateDoc(docRef, docData);
  }
};

export async function removeSubtask(id: string, index: number) {
  if (uid) {
    const docRef = doc(db, "users", uid, "todos", id);
    const document = await getDoc(docRef);
    const docData = document.data() as Todo;
  
    // Remove the subtask from the array
    docData.subtask.splice(index, 1);
  
    // Update the document with the new subtasks
    await updateDoc(docRef, docData);
  }
};

export async function deleteDocument(id: string, type: 'todo' | 'note') {
  if (uid) {
    let docRef;
    if (type === 'todo') {
      docRef = doc(db, "users", uid, "todos", id);
    }
    else {
      docRef = doc(db, "users", uid, "notes", id);
    }
  
    await deleteDoc(docRef);
  }
};


export const subscribeToNotesChanges = (callback: (notes: Note[]) => void) => {
  const unsubscribe = onSnapshot(query(collection(db, "users", uid ?? 'guest', "notes")), (snapshot) => {
    const updatedNotes: Note[] = [];
    snapshot.forEach((doc) => {
      updatedNotes.push({ id: doc.id, ...doc.data() } as Note);
    });
    callback(updatedNotes);
  });

  return unsubscribe; // Return the unsubscribe function
};

export const subscribeToTodosChanges = (callback: (todos: Todo[]) => void) => {
  const unsubscribe = onSnapshot(query(collection(db, "users", uid ?? 'guest', "todos")), (snapshot) => {
    const updatedTodos: Todo[] = [];
    snapshot.forEach((doc) => {
      updatedTodos.push({ id: doc.id, ...doc.data() } as Todo);
    });
    callback(updatedTodos);
  });

  return unsubscribe; // Return the unsubscribe function
};

export function logout() {
  signOut(auth).then(() => {
    return true;
  })
  .catch((error) => {
    console.log(error);
    return false
  });
};

export function clearStorage() {
  Object.keys(localStorage).map((key) => {
    localStorage.removeItem(key);
  })
};

export async function getUserPicUrl() {
  if (uid) {
    const docRef = doc(db, "users", uid);
    const userDocument = await getDoc(docRef);

    const data = userDocument.data();

    return <string>data?.userPicUrl;
  }
};

export function convertTimestampToString(timestamp : Timestamp) {
  const date = timestamp.toDate();
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  const formattedDate = `${hours}:${minutes}, ${date.toLocaleDateString([], { day: 'numeric', month: 'numeric' })}`;
  return formattedDate;
};
